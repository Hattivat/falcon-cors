diff --git a/falcon/api.py b/falcon/api.py
index d05ec71..b7c3860 100644
--- a/falcon/api.py
+++ b/falcon/api.py
@@ -17,6 +17,7 @@ import re
 import six
 
 from falcon import api_helpers as helpers
+from falcon.cors import CORS, CORSMiddleware
 from falcon import DEFAULT_MEDIA_TYPE
 from falcon.http_error import HTTPError
 from falcon.http_status import HTTPStatus
@@ -95,6 +96,9 @@ class API(object):
             to use in lieu of the default engine.
             See also: :ref:`Routing <routing>`.
 
+        cors (CORS, optional): An instance of :py:class:`~falcon.cors.CORS` to be
+            used as global CORS configuration for the API.
+
     Attributes:
         req_options (RequestOptions): A set of behavioral options related to
             incoming requests.
@@ -117,13 +121,25 @@ class API(object):
 
     def __init__(self, media_type=DEFAULT_MEDIA_TYPE, before=None, after=None,
                  request_type=Request, response_type=Response,
-                 middleware=None, router=None):
+                 middleware=None, router=None, cors=None):
         self._sinks = []
         self._media_type = media_type
 
         self._before = helpers.prepare_global_hooks(before)
         self._after = helpers.prepare_global_hooks(after)
 
+        if cors is not None:
+            if not isinstance(cors, CORS):
+                raise ValueError('cors argument must be an instance of '
+                                 'falcon.cors.CORS')
+            cors_middleware = CORSMiddleware(cors)
+            if isinstance(middleware, list):
+                middleware.insert(0, cors_middleware)
+            elif middleware is None:
+                middleware = [cors_middleware]
+            else:
+                middleware = [cors_middleware, middleware]
+
         # set middleware
         self._middleware = helpers.prepare_middleware(middleware)
 
